import streamlit as st
import pandas as pd
import pickle
import requests
import ast

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
with open("movies_metadata.pkl", "rb") as f:
    merged_df = pickle.load(f)

with open("cosine_sim.pkl", "rb") as f:
    cosine_sim = pickle.load(f)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
indices = pd.Series(merged_df.index, index=merged_df['title']).drop_duplicates()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–µ—Ä–∞ —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ OMDB API
def get_movie_poster(title):
    api_key = "2bc61912"  # –¢–≤–æ–π API-–∫–ª—é—á
    url = f"http://www.omdbapi.com/?t={title}&apikey={api_key}"
    response = requests.get(url)
    data = response.json()
    return data.get('Poster', 'https://via.placeholder.com/300x450?text=No+Image')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—ë—Ä–æ–≤ —Ñ–∏–ª—å–º–∞
def get_actors(title):
    api_key = "2bc61912"  # –¢–≤–æ–π API-–∫–ª—é—á
    url = f"http://www.omdbapi.com/?t={title}&apikey={api_key}"
    response = requests.get(url)
    data = response.json()
    return data.get('Actors', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ (–µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞)
def parse_list_from_string(data_str):
    try:
        return ast.literal_eval(data_str)
    except:
        return []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def parse_genres(genres_data):
    if isinstance(genres_data, str):
        genres_data = parse_list_from_string(genres_data)
    return ', '.join([genre['name'] for genre in genres_data]) if genres_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


def parse_production_countries(countries_data):
    if isinstance(countries_data, str):
        countries_data = parse_list_from_string(countries_data)
    return ', '.join([country['name'] for country in countries_data]) if countries_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
def get_similar_movies(title, num_movies=5):
    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:num_movies + 1]
    movie_indices = [i[0] for i in sim_scores]
    return merged_df.iloc[movie_indices][
        ['title', 'mean_rating', 'num_votes', 'metadata', 'budget', 'genres', 'production_countries', 'release_date',
         'runtime', 'genre_names']]


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–±–æ—Ä–∞
if 'history' not in st.session_state:
    st.session_state.history = []

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å–º–æ–≤")

# –í–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–º
search_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞:")

# –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–≤–µ–¥–µ–Ω–æ, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
if search_input:
    matched_titles = merged_df[merged_df['title'].str.contains(search_input, case=False, na=False)]['title'].tolist()
else:
    matched_titles = []

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
if matched_titles:
    selected_movie = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞:", matched_titles)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å—Ç–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞
    poster_url = get_movie_poster(selected_movie)
    st.image(poster_url, width=200)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    num_recommendations = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:", min_value=1, max_value=20, value=5)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
        recommendations = get_similar_movies(selected_movie, num_movies=num_recommendations)
        st.subheader("üìå –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:")

        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∏–ª—å–º—É
        for index, movie in recommendations.iterrows():
            st.markdown(f"### {movie['title']}")
            st.image(get_movie_poster(movie['title']), width=200)

            # –í—ã–≤–æ–¥–∏–º –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            st.write(f"**–ë—é–¥–∂–µ—Ç**: ${movie['budget']:,}")
            st.write(f"**–ñ–∞–Ω—Ä—ã**: {parse_genres(movie['genres'])}")
            st.write(f"**–°—Ç—Ä–∞–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞**: {parse_production_countries(movie['production_countries'])}")
            st.write(f"**–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞**: {movie['release_date']}")
            st.write(f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: {movie['runtime']} –º–∏–Ω—É—Ç")

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—ë—Ä–æ–≤ —Ñ–∏–ª—å–º–∞
            actors = get_actors(movie['title'])
            st.write(f"**–ê–∫—Ç—ë—Ä—ã**: {actors}")

            st.write("---")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º –≤ –∏—Å—Ç–æ—Ä–∏–∏
        st.session_state.history.append(selected_movie)

    # –ò—Å—Ç–æ—Ä–∏—è –≤—ã–±–æ—Ä–∞
    st.subheader("üìù –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –≤—ã–±–æ—Ä–æ–≤:")
    if st.session_state.history:
        for movie in st.session_state.history:
            st.write(f"- {movie}")
else:
    st.info("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
